<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Prolog | Learn Prolog The Hard Way]]></title>
  <link href="http://fengdidi.github.com/blog/categories/prolog/atom.xml" rel="self"/>
  <link href="http://fengdidi.github.com/"/>
  <updated>2011-11-18T20:38:10+01:00</updated>
  <id>http://fengdidi.github.com/</id>
  <author>
    <name><![CDATA[泰安小码农]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第1章:配置开发环境]]></title>
    <link href="http://fengdidi.github.com/blog/2011/11/15/di-1zhang-pei-zhi-kai-fa-huan-jing/"/>
    <updated>2011-11-15T20:08:00+01:00</updated>
    <id>http://fengdidi.github.com/blog/2011/11/15/di-1zhang-pei-zhi-kai-fa-huan-jing</id>
    <content type="html"><![CDATA[<p>这道习题几乎没有代码内容，它的主要目的是让你在计算机上安装好Prolog。你应该尽量照着说明进行操作。</p>

<h2>安装SWI-Prolog</h2>

<h3>MacOS</h3>

<ol>
<li>找一个你最喜欢的文本编辑器。在Mac系统下，TextMate也许是最好的选择，但是它是需要花钱购买的，如果你不想买的话，可以使用一些免费的文本编辑器比如Kod。需要注意的是，这写编辑器本身都是不支持Prolog代码高亮的，如果你想要这个功能，你需要下载针对这些文本编辑器的插件，其中TextMate的插件可以在这里下载到<a href="http://netcetera.org/cgi-bin/tmbundles.cgi" title="Title">TextMate Bundle</a></li>
<li>下载<a href="http://www.swi-prolog.org/download/stable" title="Title">SWI-Prolog</a>，请选择适合你系统版本的链接。下载解压之后双击安装包，等待一段时间以后，你的Prolog就安装好了。SWI-Prolog是Prolog的一个实现，作者是来自阿姆斯特丹大学的Jan，之所以选择这个Prolog实现作为开发的环境，一个原因是因为它很稳定，运行速度也算是可以，更重要的原因是它的开发文档写的很详细。这个Prolog的实现不是功能最多的，但是我个人认为是最好用的，也是最适合Prolog的初学者使用。</li>
<li>当你安装好Prolog以后，进入命令终端，输入：<pre><code>swipl</code></pre>你应当看见下图：
<img src="/images/chapter1_1.png" title="title" alt="&quot;alt&quot;" /></li>
</ol>


<h3>Windows</h3>

<ol>
<li>第一步同样是找一个自己喜欢的文本编辑器，个人推荐Notepad++，你可以轻易的在Google上搜寻到下载地址。</li>
<li>下载<a href="http://www.swi-prolog.org/download/stable" title="Title">SWI-Prolog</a>，选择Windows的安装包，下载解压之后双击安装包，等待一段时间以后，你的Prolog就安装好了。</li>
<li>与MacOS不同的是，在Windows下，你可以不必去命令行下面输入"swipl",你可以直接双击桌面上的快捷方式就可以打开SWI-Prolog了。打开以后的界面应该和MacOS下的界面类似。</li>
</ol>


<h3>Linux</h3>

<p>我相信使用Linux系统的朋友应该都懂得如何安装一个小小的软件吧？所以在这里就不赘述了～</p>

<h2>Hello World!</h2>

<p>好像在大部分的程序语言的时候，第一个要编写的程序都是“Hello World!”。虽然“Hello World”程序不能显示出Prolog的特性，我在这里也姑且做一个“Hello World!”的程序吧，目的是让大家试一下你们刚才下载的SWI-Prolog是否工作。</p>

<p>按照之前的方法进入SWI-Prolog，在命令行下输入：</p>

<pre><code>writeln('Hello World!').
</code></pre>

<p>需要注意的是，这行代码一定要以英文中的句号"."来结尾，Prolog中的“.”和C语言中的“;”一样，都是代表一段代码的结尾。再者，Hello World!字符串一定要以单引号来包裹。
如果输入正确的话，你将看到如下输出：</p>

<pre><code>Hello World!
true.
</code></pre>

<p>这里的“Hello World!”很好理解，这是我们要求程序输出的，那么那个奇怪的“true”是哪里来的呢？请注意，在Prolog终端输入的时候，没一个语句都是以“?-”这样两个字符开头的，它代表我们输入的程序代码其实是对Prolog系统的一个查询（问询），一旦用户输入了查询，Prolog系统会运用它的知识库来判定这个查询是真(true)是假(false). writeln是Prolog系统自己定义的一个语句, 它的作用是向当前的显示设备输出一个字符串并且换行, 所以很显然, 这个语句是真的, 因为Prolog知道有这个语句. 这就是为什么程序的最后有一个"true". 有意思的是,因为整个过程中Prolog都是在试图证明这个语句是真是假, 向屏幕输出"Hello World!"这件事实际上是执行这个语句的"副作用"(side effect)!在Prolog中, 很多任务都是靠副作用来实现的, 包括输入输出, 甚至是参数的传递.</p>

<p>最后，如果想要退出SWI-Prolog，输入：</p>

<pre><code>halt.
</code></pre>

<p>同样，不要忘记最后的“.”～</p>

<p>好了, 到这里, 这一章就算是结束, 因为这一章讲的内容很基本, 我就不提供习题了. 下一章我们将正式开始学习有关Prolog语言的知识! 敬请期待!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前言]]></title>
    <link href="http://fengdidi.github.com/blog/2011/11/15/qian-yan/"/>
    <updated>2011-11-15T15:47:00+01:00</updated>
    <id>http://fengdidi.github.com/blog/2011/11/15/qian-yan</id>
    <content type="html"><![CDATA[<p>我一直以来想写一部帮助想学Prolog的朋友学习Prolog的教程，因为我在学习Prolog的过程中，发现有关Prolog的教学文档很少很少，中文的文档更是几乎没有。这给我学习Prolog带来很大的困难，基本上都是在一边摸索一边学习的。所以我幻想着有一天能够写一篇Prolog的入门教程，来帮助其他想学Prolog的朋友对其有一个初步的了解。
这个想法在我心里存在了很久了，但是一直却没有付诸实施。其原因一是我没有太多的时间写这些文章，二是我没有一个如何写这部教程的点子。</p>

<p>直到台北小码农同学给我推荐了一个系列的教程叫《Learn XXX The Hard Way》，并且邀请我一起来仿照着写Prolog和Scheme的教程。我大致的阅读了一下《Learn Python The Hard Way》,发现那本书很适合对计算机了解不多，没有学过编程，但对编程感兴趣的朋友学习使用。那本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现。也许读完那本书并不意味着读者已经学会了编程，但至少读者会对编程语言以及编程这个行业有一个初步的了解。所以，我决定接受台北小码农的提议，仿照着这种格式来写一篇关于Prolog的入门教程。</p>

<p>这部教程假设读者有一定的英文基础，却不需要读者有半点的编程基础，反而，之前有过编程基础的朋友反而会发现学习起来有一定的吃力，因为Prolog的思考方式和其他的程序语言完全不同，所以你在写程序的时候需要时时刻刻地转换你的思维。</p>

<p>在学习这部教程的时候，你一定要记得一个道理，就是“万事开头难”。做事一定要不怕困难，要坚持，半途而废的话就永远不会成功。我本人就是一个喜欢半途而废的人，通常做一件事，每次都是想的比做的多，通常遇到一点儿困难以后就放弃了。所以我一直都没有成功。所以我在这里本着对我的读者负责的态度，一定要坚持把这部教程写完，这样我就总算是坚持做完了一件事。希望大家监督我哦～</p>

<p>既然我都开始坚持做完一件事了，优秀的你，一定要不管是什么原因，一定坚持下去。如果你碰到做不出来的加分习题，或者碰到一节看不懂的习题，你可以暂时跳过去，过一阵子回来再看。只要坚持下去，你总会弄懂的。</p>

<p>一开始你可能什么都看不懂。这会让你感觉很不舒服，就像学习人类的自然语言一样。你会发现很难记住一些单词和特殊符号的用法，而且会经常感到很迷茫，直到有一天，忽然一下子你会觉得豁然开朗，以前不明白的东西忽然就明白了。如果你坚持练习下去，坚持去上下求索，你最终会学会这些东西的。也许你不会成为一个编程大师，但你至少会明白程序是怎么工作的。</p>

<p>如果你通读了这部教程，却还是不知道编程是怎么回事。那也没关系，至少你尝试过了。你可以说你已经尽过力但成效不佳，但至少你尝试过了。这也是一件值得你骄傲的事情。</p>

<h2>许可协议</h2>

<p>你可以在不收取任何费用，而且不修改任何内容的前提下自由分发这本书给任何人。但是本书的内容只允许完整原封不动地进行分发和传播。</p>
]]></content>
  </entry>
  
</feed>
